function Barrack(type) {    Building.call(this, type);    this.KillTroop = function (id, date, amount) {        var bData = this.Get(id);        var realDate = this.RealDate(id, date);        if (bData.FinishTrainDate > realDate) {            bData.FinishTrainDate += amount * this.TrainTime(id);        }        else {            bData.FinishTrainDate = realDate + amount * this.TrainTime(id);        }        return true;    };    this.ChangeTroop = function (id, date, troopType) {        var bData = this.Get(id);        if (bData.Upgrading) {            log.error("This barrack is constructing!");            return false;        }        var curLvData = this.CurLvlData(id);        bData.TroopType = troopType;        var totalTroop = Math.floor(curLvData.TroopCapacity / this.TroopSize(id));        bData.FinishTrainDate = date + totalTroop * this.TrainTime(id);        return true;    };    /**     * @return {number}     */    this.TrainTime = function (id) {        var k;        switch (this.Get(id).TroopType) {            case INF:                k = "InfantryTrainTime";                break;            case SKR:                k = "SkirmisherTrainTime";                break;            case CAV:                k = "CavalryTrainTime";                break;        }        return this.CurLvlData(id)[k];    };    /**     * @return {number}     */    this.TroopSize = function (id) {        if (this.Get(id).TroopType === CAV) {            return 2;        }        return 1;    };    this.BoostTrainAll = function (date) {        var boostCost = 0;        var k;        for (k in this.Data) {            boostCost += this.GetBoostCost(k, date);        }        if (boostCost > 0 && Currency.Spend(DIAMOND, boostCost)) {            for (k in this.Data) {                this.Get(k).FinishTrainDate = date;            }            return true;        }        return false;    };    this.BoostTrain = function (id, date) {        var boostCost = this.GetBoostCost(id, date);        if (boostCost > 0 && Currency.Spend(DIAMOND, boostCost)) {            this.Get(id).FinishTrainDate = date;            return true;        }        return false;    };    this.GetBoostCost = function (id, date) {        if (!this.Get(id).Upgrading) {            var remainTime = this.Get(id).FinishTrainDate - date;            if (remainTime > 0) {                return Converter.TimeToDiamond(remainTime);            }        }        return 0;    };    this.DefaultData = function (date, position) {        return {            "Level": 0,            "Upgrading": false,            "CompletedDate": 0,            "Position": position,            "FinishTrainDate": date,            "TroopType": "Infantry"        }    };    this.PreComplete = function (id, date) {        var bData = this.Get(id);        var curLvData = this.CurLvlData(id);        if (bData.Level > 1) {            bData.FinishTrainDate += date - (bData.CompletedDate - curLvData.BuildTime);        }    };    this.RealDate = function (id, date) {        if (this.Get(id).Upgrading) {            return this.Get(id).CompletedDate - this.NxtLvlData(id).BuidTime;        }        return date;    };    this.TroopCount = function (id, date) {        var realDate = this.RealDate(id, date);        var bData = this.Get(id);        var curLvData = this.CurLvlData(id);        var totalTroop = Math.floor(curLvData.TroopCapacity / this.TroopSize(id));        if (bData.FinishTrainDate < realDate) {            return totalTroop;        }        else {            var remainTroop = ( bData.FinishTrainDate - realDate ) / this.TrainTime(id);            return Math.floor(totalTroop - remainTroop);        }    }}Barrack.prototype = Object.create(Building.prototype);